from math import e

''' 
    Neville iterative interpolation Algorithm - page 91 - Algorithm 3.1
    Entry values:
        Value of X = X
        Values of X = valX
        First values of Q = valQ
    Ouput:
        Approximation result of p or message of failure
'''

# ============================================================================ #
#                    Integral doble gaussiana Algorithm                        #
# ============================================================================ #

def DobleGaussian(a,b,m,n,f, dx,cx,r,c):
    h1 = (b-a)/2
    h2 = (b+a)/2
    J = 0
    for i in range(m):
        JX = 0
        x = (h1)*r[i]+h2
        d1 = dx(x)
        c1 = cx(x)
        k1 = (d1-c1)/2
        k2 = (d1+c1)/2

        for j in range(n):
            y = (k1)*r[j] + k2
            Q = f(x, y)
            JX = JX + c[j]*Q
            J = J + c[i]*k1*JX
        J = h1*J

        return J
    



# ============================================================================ #
#                     End Integral doble gaussiana Algorithm                   #
# ============================================================================ #




# ============================================================================ #
#                            Test Cases                                        #
# ============================================================================ #

# Test Case 1
print("\nTest 1")

a = 0.1
b = 0.5
m = 5
n = 5
f = lambda x, y: e**(y/x)
cx = lambda x: x**2
dx = lambda x: x**3

r = [
        0.5773502692, 
        -0.5773502692, 
        0.7745966692, 
        0, 
        -0.7745966692, 
        0.8611363116, 
        0.3399810436, 
        -0.3399810436, 
        -0.8611363116, 
        0.9061798459, 
        0.5384693101, 
        0, 
        -0.5384693101, 
        -0.9061798459
]

c = [
        1,
        1,
        0.5555555556,
        0.8888888889,
        0.5555555556,
        0.3478548451,
        0.6521451549,
        0.6521451549,
        0.3478548451,
        0.2369268850,
        0.4786286705,
        0.5688888889,
        0.4786286705,
        0.2369268850,
]

print(DobleGaussian(a,b,m,n,f,dx,cx,r,c))


# ============================================================================ #
#                            End Test Cases                                    #
# ============================================================================ #